{"remainingRequest":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\layout\\components\\TagsView\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\layout\\components\\TagsView\\index.vue","mtime":1615171048043},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { generateTitle, i18nRoute } from '@/utils/i18n'\r\nimport ScrollPane from './ScrollPane'\r\nimport path from 'path'\r\n\r\nexport default {\r\n\tcomponents: { ScrollPane },\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tvisible: false,\r\n\t\t\ttop: 0,\r\n\t\t\tleft: 0,\r\n\t\t\tselectedTag: {},\r\n\t\t\taffixTags: []\r\n\t\t}\r\n\t},\r\n\tcomputed: {\r\n\t\tvisitedViews() {\r\n\t\t\treturn this.$store.state.tagsView.visitedViews\r\n\t\t},\r\n\t\troutes() {\r\n\t\t\treturn this.$store.state.permission.routes\r\n\t\t}\r\n\t},\r\n\twatch: {\r\n\t\t$route() {\r\n\t\t\tthis.addTags()\r\n\t\t\tthis.moveToCurrentTag()\r\n\t\t},\r\n\t\tvisible(value) {\r\n\t\t\tif (value) {\r\n\t\t\t\tdocument.body.addEventListener('click', this.closeMenu)\r\n\t\t\t} else {\r\n\t\t\t\tdocument.body.removeEventListener('click', this.closeMenu)\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tmounted() {\r\n\t\tthis.initTags()\r\n\t\tthis.addTags()\r\n\t},\r\n\tmethods: {\r\n\t\tgenerateTitle,\r\n\t\ti18nRoute,\r\n\t\tisActive(route) {\r\n\t\t\treturn route.path === this.$route.path\r\n\t\t},\r\n\t\tfilterAffixTags(routes, basePath = '/') {\r\n\t\t\tlet tags = []\r\n\t\t\troutes.forEach((route) => {\r\n\t\t\t\tif (route.meta && route.meta.affix) {\r\n\t\t\t\t\tconst tagPath = path.resolve(basePath, route.path)\r\n\t\t\t\t\ttags.push({\r\n\t\t\t\t\t\tfullPath: tagPath,\r\n\t\t\t\t\t\tpath: tagPath,\r\n\t\t\t\t\t\tname: route.name,\r\n\t\t\t\t\t\tmeta: { ...route.meta }\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tif (route.children) {\r\n\t\t\t\t\tconst tempTags = this.filterAffixTags(route.children, route.path)\r\n\t\t\t\t\tif (tempTags.length >= 1) {\r\n\t\t\t\t\t\ttags = [...tags, ...tempTags]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\treturn tags\r\n\t\t},\r\n\t\tinitTags() {\r\n\t\t\tconst affixTags = (this.affixTags = this.filterAffixTags(this.routes))\r\n\t\t\tfor (const tag of affixTags) {\r\n\t\t\t\t// Must have tag name\r\n\t\t\t\tif (tag.name) {\r\n\t\t\t\t\tthis.$store.dispatch('tagsView/addVisitedView', tag)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\taddTags() {\r\n\t\t\tconst { name } = this.$route\r\n\t\t\tif (name) {\r\n\t\t\t\tthis.$store.dispatch('tagsView/addView', this.$route)\r\n\t\t\t}\r\n\t\t\treturn false\r\n\t\t},\r\n\t\tmoveToCurrentTag() {\r\n\t\t\tconst tags = this.$refs.tag\r\n\t\t\tthis.$nextTick(() => {\r\n\t\t\t\tfor (const tag of tags) {\r\n\t\t\t\t\tif (tag.to.path === this.$route.path) {\r\n\t\t\t\t\t\tthis.$refs.scrollPane.moveToTarget(tag)\r\n\t\t\t\t\t\t// when query is different then update\r\n\t\t\t\t\t\tif (tag.to.fullPath !== this.$route.fullPath) {\r\n\t\t\t\t\t\t\tthis.$store.dispatch('tagsView/updateVisitedView', this.$route)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t},\r\n\t\trefreshSelectedTag(view) {\r\n\t\t\tthis.$store.dispatch('tagsView/delCachedView', view).then(() => {\r\n\t\t\t\tconst { fullPath } = view\r\n\t\t\t\tthis.$nextTick(() => {\r\n\t\t\t\t\tthis.$router.replace({\r\n\t\t\t\t\t\tpath: '/redirect' + fullPath\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t},\r\n\t\tcloseSelectedTag(view) {\r\n\t\t\tthis.$store.dispatch('tagsView/delView', view).then(({ visitedViews }) => {\r\n\t\t\t\tif (this.isActive(view)) {\r\n\t\t\t\t\tthis.toLastView(visitedViews, view)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t},\r\n\t\tcloseOthersTags() {\r\n\t\t\tthis.$router.push(this.selectedTag)\r\n\t\t\tthis.$store\r\n\t\t\t\t.dispatch('tagsView/delOthersViews', this.selectedTag)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tthis.moveToCurrentTag()\r\n\t\t\t\t})\r\n\t\t},\r\n\t\tcloseAllTags(view) {\r\n\t\t\tthis.$store.dispatch('tagsView/delAllViews').then(({ visitedViews }) => {\r\n\t\t\t\tif (this.affixTags.some((tag) => tag.path === view.path)) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tthis.toLastView(visitedViews, view)\r\n\t\t\t})\r\n\t\t},\r\n\t\ttoLastView(visitedViews, view) {\r\n\t\t\tconst latestView = visitedViews.slice(-1)[0]\r\n\t\t\tif (latestView) {\r\n\t\t\t\tthis.$router.push(latestView)\r\n\t\t\t} else {\r\n\t\t\t\t// now the default is to redirect to the home page if there is no tags-view,\r\n\t\t\t\t// you can adjust it according to your needs.\r\n\t\t\t\tif (view.name === 'Dashboard') {\r\n\t\t\t\t\t// to reload home page\r\n\t\t\t\t\tthis.$router.replace({ path: '/redirect' + view.fullPath })\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.$router.push('/')\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\topenMenu(tag, e) {\r\n\t\t\tconst menuMinWidth = 105\r\n\t\t\tconst offsetLeft = this.$el.getBoundingClientRect().left // container margin left\r\n\t\t\tconst offsetWidth = this.$el.offsetWidth // container width\r\n\t\t\tconst maxLeft = offsetWidth - menuMinWidth // left boundary\r\n\t\t\tconst left = e.clientX - offsetLeft + 15 // 15: margin right\r\n\r\n\t\t\tif (left > maxLeft) {\r\n\t\t\t\tthis.left = maxLeft\r\n\t\t\t} else {\r\n\t\t\t\tthis.left = left\r\n\t\t\t}\r\n\r\n\t\t\tthis.top = e.clientY\r\n\t\t\tthis.visible = true\r\n\t\t\tthis.selectedTag = tag\r\n\t\t},\r\n\t\tcloseMenu() {\r\n\t\t\tthis.visible = false\r\n\t\t}\r\n\t}\r\n}\r\n",null]}
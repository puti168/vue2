{"remainingRequest":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\layout\\components\\TagsView\\ScrollPane.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\layout\\components\\TagsView\\ScrollPane.vue","mtime":1615171048043},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nconst tagAndTagSpacing = 4 // tagAndTagSpacing\r\n\r\nexport default {\r\n\tname: 'ScrollPane',\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tleft: 0\r\n\t\t}\r\n\t},\r\n\tcomputed: {\r\n\t\tscrollWrapper() {\r\n\t\t\treturn this.$refs.scrollContainer.$refs.wrap\r\n\t\t}\r\n\t},\r\n\tmethods: {\r\n\t\thandleScroll(e) {\r\n\t\t\tconst eventDelta = e.wheelDelta || -e.deltaY * 40\r\n\t\t\tconst $scrollWrapper = this.scrollWrapper\r\n\t\t\t$scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4\r\n\t\t},\r\n\t\tmoveToTarget(currentTag) {\r\n\t\t\tconst $container = this.$refs.scrollContainer.$el\r\n\t\t\tconst $containerWidth = $container.offsetWidth\r\n\t\t\tconst $scrollWrapper = this.scrollWrapper\r\n\t\t\tconst tagList = this.$parent.$refs.tag\r\n\r\n\t\t\tlet firstTag = null\r\n\t\t\tlet lastTag = null\r\n\r\n\t\t\t// find first tag and last tag\r\n\t\t\tif (tagList.length > 0) {\r\n\t\t\t\tfirstTag = tagList[0]\r\n\t\t\t\tlastTag = tagList[tagList.length - 1]\r\n\t\t\t}\r\n\r\n\t\t\tif (firstTag === currentTag) {\r\n\t\t\t\t$scrollWrapper.scrollLeft = 0\r\n\t\t\t} else if (lastTag === currentTag) {\r\n\t\t\t\t$scrollWrapper.scrollLeft = $scrollWrapper.scrollWidth - $containerWidth\r\n\t\t\t} else {\r\n\t\t\t\t// find preTag and nextTag\r\n\t\t\t\tconst currentIndex = tagList.findIndex((item) => item === currentTag)\r\n\t\t\t\tconst prevTag = tagList[currentIndex - 1]\r\n\t\t\t\tconst nextTag = tagList[currentIndex + 1]\r\n\r\n\t\t\t\t// the tag's offsetLeft after of nextTag\r\n\t\t\t\tconst afterNextTagOffsetLeft =\r\n\t\t\t\t\tnextTag.$el.offsetLeft + nextTag.$el.offsetWidth + tagAndTagSpacing\r\n\r\n\t\t\t\t// the tag's offsetLeft before of prevTag\r\n\t\t\t\tconst beforePrevTagOffsetLeft = prevTag.$el.offsetLeft - tagAndTagSpacing\r\n\r\n\t\t\t\tif (afterNextTagOffsetLeft > $scrollWrapper.scrollLeft + $containerWidth) {\r\n\t\t\t\t\t$scrollWrapper.scrollLeft = afterNextTagOffsetLeft - $containerWidth\r\n\t\t\t\t} else if (beforePrevTagOffsetLeft < $scrollWrapper.scrollLeft) {\r\n\t\t\t\t\t$scrollWrapper.scrollLeft = beforePrevTagOffsetLeft\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",null]}
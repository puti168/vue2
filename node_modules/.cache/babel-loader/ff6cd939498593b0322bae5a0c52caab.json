{"remainingRequest":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\store\\modules\\permission.js","dependencies":[{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\store\\modules\\permission.js","mtime":1617783328309},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _objectSpread from \"C:/Users/admin/Desktop/merchant-manager-web/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { constantRoutes } from '@/router';\nimport Layout from '@/layout';\n/**\r\n * Use meta.role to determine if the current user has permission\r\n * @param roles\r\n * @param route\r\n */\n\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.roles) {\n    return roles.some(function (role) {\n      return route.meta.roles.includes(role);\n    });\n  } else {\n    return true;\n  }\n}\n/**\r\n * Filter asynchronous routing tables by recursion\r\n * @param routes asyncRoutes\r\n * @param roles\r\n */\n\n\nexport function filterAsyncRoutes(routes, roles) {\n  var res = [];\n  routes.forEach(function (route) {\n    var tmp = _objectSpread({}, route);\n\n    if (hasPermission(roles, tmp)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, roles);\n      }\n\n      res.push(tmp);\n    }\n  });\n  return res;\n}\n/**\r\n * 获取用户按钮权限\r\n * @param {*} roles\r\n */\n\nfunction getBtnPermissions(roles) {\n  // return roles.filter((val) => val.type === '1').map((val) => val.id)\n  return roles.map(function (val) {\n    return val.id;\n  });\n}\n/**\r\n * 获取路由拼接路由\r\n * @param {*} userInfo\r\n */\n\n\nfunction getAccessedRoutes(userInfo) {\n  var roles = userInfo.roles;\n  var hasModel = userInfo.hasModel; // 1为费率/购点 2位费率 3位购点\n\n  var filterPath = hasModel === 1 ? [] : hasModel === 2 ? ['/merchant/dotdeal', '/merchant/rateaccount'] : ['/merchant/ratedeal'];\n  var filterPath2 = ['/operationManage/memberReward'];\n  var parentRoutes = []; // 获取用户路由\n\n  var userRoutes = roles.filter(function (val) {\n    return val.type === '0';\n  }); // 遍历一次找出父路由\n\n  userRoutes.forEach(function (element) {\n    // element.permissionName 是由我们定义给后台，component也是\n    if (element.parentId === 0) {\n      if (element.permissionName !== 'dataAuthority') {\n        parentRoutes.push({\n          id: element.id,\n          path: element.component,\n          name: element.permissionName,\n          alwaysShow: true,\n          component: Layout,\n          meta: {\n            title: element.permissionName,\n            icon: element.icon\n          },\n          children: [],\n          hidden: false\n        });\n      }\n    }\n  }); // 再遍历找出子级 (因为两级所以遍历两次)\n\n  userRoutes.forEach(function (element) {\n    if (element.parentId > 0) {\n      var index = parentRoutes.findIndex(function (val) {\n        return val.id === element.parentId;\n      });\n\n      if (index > -1) {\n        if (parentRoutes[index].path === '/merchant' && filterPath.includes(element.component)) {\n          return false;\n        }\n\n        if (parentRoutes[index].path === '/operationManage' && filterPath2.includes(element.component)) {\n          return false;\n        }\n\n        parentRoutes[index].children.push({\n          path: element.component,\n          name: element.permissionName,\n          component: function component(resolve) {\n            return require(['@/views' + element.component + '/index'], resolve);\n          },\n          meta: {\n            title: element.permissionName,\n            icon: element.icon\n          }\n        });\n      }\n    }\n  }); // 如果父路由只有一层,赋值一层子路由\n\n  parentRoutes.forEach(function (element) {\n    delete element.id;\n\n    if (element.children && element.children.length === 0) {\n      var path = element.path && element.path.split('/')[1];\n      path = \"\".concat(element.path, \"/\").concat(path);\n      element.children.push({\n        path: path,\n        name: element.name + 'List',\n        // 修复子路由和父路由重名的问题\n        component: function component(resolve) {\n          return require(['@/views' + element.path + '/index'], resolve);\n        },\n        meta: {\n          title: element.name,\n          icon: element.icon\n        }\n      });\n    }\n\n    if (element.name === 'home') {\n      element.single = true;\n    }\n\n    if (element.children && element.children.length !== 0) {\n      element.redirect = \"\".concat(element.children[0].path);\n    }\n  }); // 根据路由跳转, 定义根路由\n\n  var rootRoutes = []; // 选择默认进入的页面\n\n  if (parentRoutes.length !== 0) {\n    var rootRoute = parentRoutes[0];\n    rootRoutes.push({\n      path: '/',\n      redirect: rootRoute.path,\n      hidden: false\n    });\n  } // 信用日结和点数日结需要前端写死\n  // 会员报表每日详情前端写死\n  // 会员打赏报表前端写死\n\n\n  parentRoutes.forEach(function (item, index) {\n    if (item.name === 'members') {\n      item.children.push({\n        path: '/members/reportDaily',\n        name: 'reportDaily',\n        component: function component() {\n          return import(\"@/views/members/reportDaily/index\");\n        },\n        meta: {\n          title: 'reportDaily',\n          icon: 'bb_reportDaily'\n        },\n        needHidden: true\n      });\n    }\n\n    if (item.name === 'operationManage') {\n      item.children.push({\n        path: '/operationManage/memberReward',\n        name: 'memberReward',\n        component: function component() {\n          return import(\"@/views/operationManage/memberReward/index\");\n        },\n        meta: {\n          title: 'memberReward',\n          icon: 'bb_reportDaily'\n        },\n        needHidden: true\n      });\n      item.children.push({\n        path: '/operationManage/activityDetail',\n        name: 'activityDetail',\n        component: function component() {\n          return import(\"@/views/operationManage/activityDetail/index\");\n        },\n        meta: {\n          title: 'activityTaskDetail',\n          icon: 'bb_reportDaily'\n        },\n        needHidden: true\n      });\n    }\n\n    if (item.name === 'authoritymanagement') {\n      item.children.push({\n        path: '/authoritymanagement/subAccount',\n        name: 'subAccount',\n        component: function component() {\n          return import(\"@/views/authoritymanagement/subAccount/index\");\n        },\n        meta: {\n          title: 'subAccount',\n          icon: 'bb_reportDaily'\n        },\n        needHidden: true\n      });\n    }\n\n    if (item.name === 'merchant') {\n      item.children.push({\n        path: '/merchant/dailyrateaccount',\n        name: 'dailyrateaccount',\n        component: function component() {\n          return import(\"@/views/merchant/dailyrateaccount/index\");\n        },\n        meta: {\n          title: 'dailyrateaccount',\n          icon: 'bb_dailyrateaccount'\n        },\n        needHidden: true\n      });\n      item.children.push({\n        path: '/merchant/dailyratedeal',\n        name: 'dailyratedeal',\n        component: function component() {\n          return import(\"@/views/merchant/dailyratedeal/index\");\n        },\n        meta: {\n          title: 'dailyratedeal',\n          icon: 'bb_dailyratedeal'\n        },\n        needHidden: true\n      });\n    }\n  });\n  console.log('parentRoutes :>> ', parentRoutes);\n  console.log('test1');\n  return rootRoutes.concat(parentRoutes.concat([{\n    path: '*',\n    redirect: '/404',\n    hidden: true\n  }]));\n}\n\nvar state = {\n  routes: [],\n  addRoutes: [],\n  userBtns: []\n};\nvar mutations = {\n  SET_ROUTES: function SET_ROUTES(state, value) {\n    state.addRoutes = value.accessedRoutes;\n    state.routes = constantRoutes.concat(value.accessedRoutes);\n    state.userBtns = value.userBtns;\n  },\n  CLEAR_ROUTES: function CLEAR_ROUTES(state) {\n    state.addRoutes = [];\n  }\n};\nvar actions = {\n  generateRoutes: function generateRoutes(_ref, userInfo) {\n    var commit = _ref.commit;\n    // 获取用户按钮权限\n    var userBtns = getBtnPermissions(userInfo.roles); // 获取路由拼接路由\n\n    var accessedRoutes = getAccessedRoutes(userInfo);\n    return new Promise(function (resolve) {\n      commit('SET_ROUTES', {\n        accessedRoutes: accessedRoutes,\n        userBtns: userBtns\n      });\n      resolve(constantRoutes.concat(accessedRoutes));\n    });\n  },\n  clearRoutes: function clearRoutes(_ref2) {\n    var commit = _ref2.commit;\n    commit('CLEAR_ROUTES');\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}
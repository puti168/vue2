{"remainingRequest":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\views\\abnormalRound\\players\\components\\IPLogin.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\views\\abnormalRound\\players\\components\\IPLogin.vue","mtime":1616384580032},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.find\";\nimport _objectSpread from \"C:/Users/admin/Desktop/merchant-manager-web/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport HistoryRecord from '@/views/abnormalRound/players/components/HistoryRecord';\nimport BetDetail from '@/views/abnormalRound/players/components/BetDetail';\nimport list from '@/mixins/list';\nimport { mapGetters } from 'vuex';\nimport dayjs from 'dayjs';\nimport Video from '@/components/Video';\nimport ResultShow from '@/components/ResultShow';\nimport Cookies from 'js-cookie';\nexport default {\n  name: 'IPLogin',\n  components: {\n    HistoryRecord: HistoryRecord,\n    Video: Video,\n    ResultShow: ResultShow,\n    BetDetail: BetDetail\n  },\n  mixins: [list],\n  props: {\n    drawer: {\n      type: Boolean,\n      default: function _default() {\n        return false;\n      }\n    },\n    ipdata: {\n      type: Object,\n      default: function _default() {}\n    },\n    page: {\n      type: String,\n      default: 'default'\n    }\n  },\n  doNotInit: true,\n  data: function data() {\n    return {\n      dialogShow: false,\n      loading: false,\n      elDrawer: true,\n      recordData: null,\n      historyRecordShow: false,\n      videoSrc: '',\n      showVideo: false,\n      currentData: {},\n      detailVisible: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['globalDics'])), {}, {\n    agenttype: function agenttype() {\n      return this.globalDics.agenttype;\n    },\n    gametype: function gametype() {\n      var types = this.globalDics.gametype || [];\n      return types.map(function (item) {\n        return {\n          value: item.value,\n          label: item.text,\n          zh: item.text,\n          en: item.englishText\n        };\n      });\n    },\n    gamemode: function gamemode() {\n      var types = this.globalDics.gamemode || [];\n      return types.map(function (item) {\n        return {\n          value: item.value,\n          label: item.text,\n          zh: item.text,\n          en: item.englishText\n        };\n      });\n    },\n    gameresultstatus: function gameresultstatus() {\n      return this.globalDics.gameresultstatus;\n    },\n    betstatus: function betstatus() {\n      return this.globalDics.betstatus;\n    },\n    betflag: function betflag() {\n      var types = this.globalDics.betflag || [];\n      return types.map(function (item) {\n        return {\n          value: item.value,\n          label: item.text,\n          zh: item.text,\n          en: item.englishText\n        };\n      });\n    }\n  }),\n  watch: {\n    drawer: {\n      handler: function handler(val) {\n        this.elDrawer = val;\n      },\n      immediate: true\n    },\n    ipdata: {\n      handler: function handler(val) {\n        if (val) {\n          this.loadData();\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    formatTime: function formatTime(time) {\n      return dayjs(time).format('YYYY-MM-DD hh:mm:ss');\n    },\n    loadData: function loadData() {\n      var _this = this;\n\n      this.loading = true;\n      var abnormalType = '';\n\n      if (this.ipdata.abnormalType) {\n        abnormalType = this.ipdata.abnormalType;\n      } else {\n        if (this.ipdata.gameTypeId === 2012 && this.ipdata.betFlag === 1) {\n          abnormalType = 3;\n        } else {\n          abnormalType = this.ipdata.betFlag === 2 ? 1 : this.ipdata.betFlag === 4 ? 2 : '';\n        }\n      }\n\n      var form = this.page === 'default' ? {\n        pageSize: this.pageSize,\n        pageIndex: this.pageIndex,\n        playerId: this.ipdata.playerId,\n        abnormalType: abnormalType,\n        roundNo: this.ipdata.roundNo ? this.ipdata.roundNo : this.ipdata.roundId\n      } : {\n        pageSize: this.pageSize,\n        pageIndex: this.pageIndex,\n        playerId: this.ipdata.playerId,\n        abnormalType: abnormalType,\n        roundNo: this.ipdata.roundNo ? this.ipdata.roundNo : this.ipdata.roundId,\n        betId: this.ipdata.id\n      };\n      var api = this.page === 'default' ? 'originalBettingRecordList' : 'originalBettingRecord';\n      this.$api[api](form).then(function (_) {\n        if (_.code === 200) {\n          if (_this.page === 'default') {\n            var data = _.data;\n            _this.list = data;\n            _this.total = data.length;\n          } else {\n            var _data = _.data;\n            _this.list = [_data];\n            _this.total = 1;\n          }\n        }\n\n        _this.loading = false;\n      }).catch(function (err) {\n        if (err) {\n          _this.loading = false;\n        }\n      });\n    },\n    handleIP: function handleIP(data) {\n      this.historyRecordShow = true;\n      this.recordData = data;\n    },\n    handleSearch: function handleSearch() {\n      if (!this.form.time || this.form.time === '') {\n        return this.$message({\n          message: this.$t('abnormalround_players_components_iplogin_121'),\n          type: 'error',\n          duration: 5 * 1000\n        });\n      }\n\n      this.minDate = null;\n      this.loadData();\n    },\n    handleReset: function handleReset() {\n      var end = dayjs().endOf('day').valueOf();\n      var start = dayjs().startOf('day').subtract(6, 'd').valueOf();\n      this.minDate = null;\n      this.form = {\n        time: [start, end]\n      };\n      this.initList();\n    },\n    handleCurrentChange: function handleCurrentChange() {\n      this.loadData();\n    },\n    handleClose: function handleClose() {\n      this.$emit('update:drawer', false);\n    },\n    getAmoutColor: function getAmoutColor(value) {\n      if (value > 0) {\n        return 'green';\n      } else if (value < 0) {\n        return 'red';\n      }\n\n      return '';\n    },\n    filterGameMode: function filterGameMode(c) {\n      var arr = this.gamemode || [];\n      var find = arr.find(function (item) {\n        return Number(item.value) === Number(c);\n      });\n\n      if (Cookies.get('language') === 'zh') {\n        return find && find.zh || '-';\n      }\n\n      if (Cookies.get('language') === 'en') {\n        return find && find.en || '-';\n      }\n\n      return '-';\n    },\n    filterBetflag: function filterBetflag(c) {\n      var arr = this.betflag || [];\n      var find = arr.find(function (item) {\n        return Number(item.value) === Number(c);\n      });\n\n      if (Cookies.get('language') === 'zh') {\n        return find && find.zh || '-';\n      }\n\n      if (Cookies.get('language') === 'en') {\n        return find && find.en || '-';\n      }\n\n      return '-';\n    },\n    filterBetStatus: function filterBetStatus(value) {\n      return value === 0 ? this.$t('abnormalround_players_components_iplogin_122') : this.$t('abnormalround_players_components_iplogin_123');\n    },\n    handleShowVideo: function handleShowVideo(path, row) {\n      this.showVideo = true;\n      this.videoSrc = path;\n      this.currentData = _objectSpread({}, row);\n    },\n    checkDetail: function checkDetail(row) {\n      this.detailVisible = true;\n      this.currentData = _objectSpread({}, row);\n    },\n    showResult: function showResult(row) {\n      this.dialogShow = true;\n      this.currentData = _objectSpread({}, row);\n    },\n    clearSrc: function clearSrc() {\n      this.videoSrc = '';\n    },\n    filterGametype: function filterGametype(c) {\n      var arr = this.gametype || [];\n      var find = arr.find(function (item) {\n        return item.label === c;\n      });\n\n      if (Cookies.get('language') === 'zh') {\n        return find && find.zh || '-';\n      }\n\n      if (Cookies.get('language') === 'en') {\n        return find && find.en || '-';\n      }\n\n      return '-';\n    }\n  }\n};",null]}
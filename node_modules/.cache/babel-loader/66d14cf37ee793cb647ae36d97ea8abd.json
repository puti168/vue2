{"remainingRequest":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\components\\SelectAgentTreeEdit\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\src\\components\\SelectAgentTreeEdit\\index.vue","mtime":1617695097389},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\admin\\Desktop\\merchant-manager-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"C:/Users/admin/Desktop/merchant-manager-web/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _objectSpread from \"C:/Users/admin/Desktop/merchant-manager-web/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport store from '@/store';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'SelectAgentTree',\n  props: {\n    value: {\n      type: [String, Number],\n      default: function _default() {\n        return '';\n      }\n    },\n    node: {\n      type: Object,\n      default: function _default() {\n        return {\n          agentName: store.state.user.name,\n          agentCode: store.state.user.agentCode\n        };\n      }\n    },\n    // 获取当前点击的节点\n    getNode: {\n      type: Function,\n      default: function _default() {}\n    },\n    width: {\n      type: [String, Number],\n      default: 218\n    }\n  },\n  data: function data() {\n    return {\n      showTree: false,\n      filterText: '',\n      // 全部数据\n      data: [],\n      // 树数据\n      tree: [],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      agentName: '',\n      agentCode: '',\n      isFirstEnter: true,\n      // 最终生成的树结构\n      storeDatas: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['userInfo'])), {}, {\n    label: function label() {\n      return this.$t('other_001');\n    }\n  }),\n  watch: {\n    filterText: function filterText(val) {\n      this.$refs.tree && this.$refs.tree.filter(val);\n    },\n    node: {\n      handler: function handler(val) {\n        // this.agentName = val.agentName\n        this.agentCode = val.agentCode;\n      },\n      immediate: true,\n      deep: true\n    },\n    value: {\n      handler: function handler(val) {\n        var index = 0;\n\n        if (val) {\n          index = this.data.findIndex(function (v) {\n            return v.id === Number(val);\n          });\n\n          if (index > -1) {\n            this.agentName = this.data[index].agentName;\n          }\n        } else {\n          this.$emit('input', this.tree[0].id);\n          this.agentName = this.tree[0] && this.tree[0].agentName;\n        } // 添加必定浏览器崩溃\n        // if (this.getNode) this.$emit('getNode', this.data[index] || {})\n\n      }\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    if (this.$store.state.tree.data.length === 0 && this.isFirstEnter) {\n      this.initData();\n    } else {\n      this.data = this.$store.state.tree.data;\n      this.tree = this.$store.state.tree.tree;\n      var index;\n\n      if (!this.value) {\n        // 找到初始agentId\n        index = this.data.findIndex(function (val) {\n          return val.agentCode === _this.agentCode;\n        });\n\n        if (index > -1) {\n          this.$emit('input', this.data[index].id);\n          this.agentName = this.data[index].agentName;\n        }\n      } else {\n        index = this.data.findIndex(function (v) {\n          return Number(v.id) === Number(_this.value);\n        });\n\n        if (index > -1) {\n          this.agentName = this.data[index].agentName;\n        }\n      }\n    }\n  },\n  mounted: function mounted() {\n    document.addEventListener('click', this.closeTree);\n  },\n  destroyed: function destroyed() {\n    this.storeDatas = [];\n    document.removeEventListener('click', this.closeTree);\n  },\n  activated: function activated() {\n    var _this2 = this;\n\n    if (this.$store.state.tree.data.length === 0) {\n      this.initData();\n    } else {\n      this.data = this.$store.state.tree.data;\n      this.tree = this.$store.state.tree.tree;\n      var index;\n\n      if (!this.value) {\n        // 找到初始agentId\n        index = this.data.findIndex(function (val) {\n          return val.agentCode === _this2.agentCode;\n        });\n\n        if (index > -1) {\n          this.$emit('input', this.data[index].id);\n          this.agentName = this.data[index].agentName;\n        }\n      } else {\n        index = this.data.findIndex(function (v) {\n          return Number(v.id) === Number(_this2.value);\n        });\n\n        if (index > -1) {\n          this.agentName = this.data[index].agentName;\n        }\n      }\n    }\n  },\n  methods: {\n    initData: function initData() {\n      var _this3 = this;\n\n      this.storeDatas = [];\n      this.isFirstEnter = false;\n      this.$api.searchOrganization().then(function (res) {\n        if (res.code === 200) {\n          if (_this3.tree.length > 0) return;\n          var organizations = res.data || [];\n          _this3.data = organizations;\n          var index;\n\n          if (!_this3.value) {\n            // 找到初始agentId\n            index = _this3.data.findIndex(function (val) {\n              return val.agentCode === _this3.agentCode;\n            });\n\n            if (index > -1) {\n              _this3.$emit('input', _this3.data[index].id);\n\n              _this3.agentName = _this3.data[index].agentName;\n            }\n          } else {\n            index = _this3.data.findIndex(function (v) {\n              return Number(v.id) === Number(_this3.value);\n            });\n\n            if (index > -1) {\n              _this3.agentName = _this3.data[index].agentName;\n            }\n          }\n\n          _this3.generateTree(_this3.data);\n\n          _this3.tree = _this3.storeDatas;\n\n          _this3.$store.dispatch('tree/setTree', _this3.storeDatas);\n\n          _this3.$store.dispatch('tree/setTreeData', _this3.data);\n        }\n      });\n    },\n    closeTree: function closeTree(e) {\n      var wrapper = document.getElementById('treeWrapper');\n\n      if (wrapper && !wrapper.contains(e.target)) {\n        this.showTree = false;\n      }\n    },\n    onShowThree: function onShowThree() {\n      var _this4 = this;\n\n      if (this.userInfo.agentType !== 2) {\n        this.filterText = '';\n        this.showTree = true;\n        this.$nextTick(function () {\n          _this4.$refs.input.focus();\n        });\n      }\n    },\n    filterNode: function filterNode(value, data, node) {\n      var _this5 = this;\n\n      if (!value) return true;\n      var value2 = value.toUpperCase();\n\n      if (node.parent && !node.parent.parent) {\n        return data.label.indexOf(value) !== -1 || data.label.indexOf(value2) !== -1;\n      }\n\n      setTimeout(function () {\n        var value3 = _this5.filterText.toUpperCase();\n\n        if (data.label.indexOf(_this5.filterText) !== -1 || data.label.indexOf(value3) !== -1) {\n          node.expanded = false;\n        }\n      }, 1000);\n      return data.label.indexOf(value) !== -1 || data.label.indexOf(value2) !== -1 || node.parent.visible;\n    },\n    // 生成树形结构\n    generateTree: function generateTree(data) {\n      var _this6 = this;\n\n      var datas = _toConsumableArray(data); // 先找出父节点\n\n\n      datas.forEach(function (element, i) {\n        var index = data.findIndex(function (val) {\n          return val.id === element.parentId;\n        });\n\n        if (index < 0) {\n          _this6.storeDatas.push(_objectSpread({\n            id: element.id,\n            label: \"\".concat(element.agentName, \" \").concat(element.agentCode),\n            children: []\n          }, element));\n\n          datas.splice(i, 1);\n        }\n      });\n      this.recursionData(datas, this.storeDatas);\n    },\n    // 递归生成\n    recursionData: function recursionData(data, tree) {\n      var _this7 = this;\n\n      var datas = _toConsumableArray(data);\n\n      var pickIndex = [];\n      var leftDatas = [];\n      datas.forEach(function (element) {\n        var index = tree.findIndex(function (val) {\n          return val.id === element.parentId;\n        });\n\n        if (index > -1) {\n          tree[index].children.push(_objectSpread({\n            id: element.id,\n            label: \"\".concat(element.agentName, \" \").concat(element.agentCode),\n            children: []\n          }, element));\n          !pickIndex.includes(index) && pickIndex.push(index);\n        } else {\n          leftDatas.push(element);\n        }\n      });\n\n      if (pickIndex.length > 0) {\n        pickIndex.forEach(function (element) {\n          _this7.recursionData(leftDatas, tree[element].children);\n        });\n      }\n    },\n    nodeClick: function nodeClick(node) {\n      this.showTree = false;\n      this.agentName = node.agentName;\n      this.$emit('input', node.id);\n\n      if (this.getNode) {\n        this.$emit('getNode', node);\n      }\n    }\n  }\n};",null]}